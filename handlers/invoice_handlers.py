"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏.
"""

import logging
import os
import uuid

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import CONFIRMATION, WAIT_PHOTO
from services.ocr_service import extract
from services.syrve_service import create_invoice
from utils.error_handling import log_error
from utils.invoice_processing import apply_unit_conversions, match_invoice_items

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def handle_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ
    if not update.message or not update.message.photo:
        await update.message.reply_text("üñº –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π...")
        return WAIT_PHOTO

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await update.message.reply_text("üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–∫–ª–∞–¥–Ω—É—é...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("tmp", exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_path = f"tmp/invoice_{update.effective_chat.id}_{uuid.uuid4()}.jpg"
        await photo_file.download_to_drive(photo_path)
        
        logger.info("Saved photo to %s", photo_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é OCR
        logger.info("Starting OCR extraction for chat %s", update.effective_chat.id)
        invoice_data = await extract(photo_path)
        
        if not invoice_data:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ "
                "—á–µ—Ç–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."
            )
            return WAIT_PHOTO
            
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        items_count = len(invoice_data.items)
        logger.info("OCR parsed %d items for chat %s", items_count, update.effective_chat.id)
        
        if items_count == 0:
            await update.message.reply_text(
                "üìÑ –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "
                "—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return WAIT_PHOTO
            
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        matched_data = await match_invoice_items(invoice_data)
        logger.info("Matched items with database")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        conversions = apply_unit_conversions(matched_data)
        logger.info("Applied %d unit conversions", len(conversions))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data["invoice"] = matched_data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preview_text = format_invoice_preview(matched_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback_data
        invoice_id = str(uuid.uuid4())
        context.user_data["invoice_id"] = invoice_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_invoice:{invoice_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data=f"edit_items:{invoice_id}"
                )
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(preview_text, reply_markup=reply_markup)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(photo_path)
            logger.debug("Removed temporary file %s", photo_path)
        except Exception as e:
            logger.warning("Failed to remove temporary file: %s", e)
        
        return CONFIRMATION
        
    except Exception as e:
        log_error(f"Error processing invoice photo: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return WAIT_PHOTO


async def handle_invoice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    if "invoice" not in context.user_data:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return WAIT_PHOTO
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    if query.data.startswith("confirm_invoice:"):
        invoice_id = query.data.split(":", 1)[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
        if context.user_data.get("invoice_id") != invoice_id:
            logger.warning(
                "Invoice ID mismatch: %s != %s", 
                context.user_data.get("invoice_id"), 
                invoice_id
            )
            await query.edit_message_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
            )
            return WAIT_PHOTO
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ Syrve
        await query.edit_message_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ Syrve...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
            invoice_data = context.user_data["invoice"]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Syrve
            doc_id = await create_invoice(invoice_data)
            
            if doc_id:
                logger.info("Invoice successfully created in Syrve with ID: %s", doc_id)
                await query.edit_message_text(
                    f"üì• –ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{doc_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Syrve."
                )
            else:
                logger.error("Failed to create invoice in Syrve")
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ Syrve. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
            context.user_data.pop("invoice", None)
            context.user_data.pop("invoice_id", None)
            
            return WAIT_PHOTO
            
        except Exception as e:
            log_error(f"Error sending invoice to Syrve: {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return WAIT_PHOTO
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    elif query.data.startswith("edit_items:"):
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üîß –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
            "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."
        )
        return WAIT_PHOTO
    
    # –ï—Å–ª–∏ callback_data –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
    else:
        logger.warning("Unknown callback_data: %s", query.data)
        await query.edit_message_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."
        )
        return WAIT_PHOTO


def format_invoice_preview(invoice_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        invoice_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
    """
    supplier = invoice_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    total = invoice_data.get("total", 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    preview = f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n"
    preview += "-" * 41 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    for i, item in enumerate(invoice_data.get("lines", [])):
        name = item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        qty = item.get("qty", 0)
        unit = item.get("unit", "")
        price = item.get("price", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞
        line_num = i + 1
        item_total = qty * price
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ljust –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        name_field = name[:15].ljust(15)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        qty_field = f"{qty:.2f} {unit}".ljust(10)
        price_field = f"{price}"
        
        line = f"{line_num}. {name_field} {qty_field} √ó {price_field} = {item_total:.2f}\n"
        preview += line
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    preview += f"\n–ò—Ç–æ–≥–æ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {total:.2f} ‚ÇΩ"
    
    return preview
