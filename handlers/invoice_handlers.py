import datetime
import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import CONFIRMATION, WAIT_PHOTO, user_data
from services.ocr_service import extract
from utils.error_handling import log_error, save_error_image
from utils.invoice_processing import (apply_unit_conversions,
                                      format_invoice_data, match_invoice_items)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def process_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user_id = update.effective_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.message.reply_text("üì∏ Received photo! Processing invoice...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        os.makedirs("logs/images", exist_ok=True)
        image_path = f"logs/images/invoice_{user_id}_{timestamp}.jpg"
        with open(image_path, "wb") as f:
            f.write(photo_bytes)
        logger.info(f"Saved invoice image to {image_path}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OCR
        logger.info(f"Starting OCR processing for user {user_id}")
        invoice_data = await extract(photo_bytes)
        logger.info(
            f"OCR processing completed: {len(invoice_data.get('lines', []))} lines extracted"
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        matched_data = await match_invoice_items(invoice_data)
        logger.info(f"Item matching completed")

        conversions_applied = apply_unit_conversions(matched_data)
        logger.info(f"Unit conversions applied: {len(conversions_applied)} conversions")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id] = {
            "invoice_data": invoice_data,
            "matched_data": matched_data,
            "conversions_applied": conversions_applied,
            "current_edit_index": None,  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            "edit_history": [],  # –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            "image_path": image_path,  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR
        message_text = format_invoice_data(user_data[user_id])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        unmatched_items = [
            item
            for item in matched_data.get("lines", [])
            if item.get("product_id") is None
        ]

        if unmatched_items:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "Fix Unrecognized Items", callback_data="edit_unmatched"
                    )
                ]
            )

        keyboard.append(
            [
                InlineKeyboardButton(
                    "Review & Edit Items", callback_data="select_edit_item"
                )
            ]
        )

        if not unmatched_items:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "Confirm & Preview Final", callback_data="final_preview"
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("Cancel", callback_data="cancel_process")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await update.message.reply_text(message_text, reply_markup=reply_markup)
        return CONFIRMATION

    except Exception as e:
        error_msg = f"Error processing photo: {e}"
        log_error(error_msg, exc_info=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É
        save_error_image(user_id, photo_bytes)

        await update.message.reply_text(
            f"‚ùå An error occurred while processing the photo: {str(e)}\n"
            "Please try sending the photo again or use a clearer image."
        )
        return WAIT_PHOTO
