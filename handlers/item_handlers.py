import asyncio
import datetime
import json
import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import (
    ADD_NEW_ITEM,
    CONFIRMATION,
    EDIT_ITEM,
    SELECT_EDIT_ITEM,
    SET_CONVERSION,
    WAIT_PHOTO,
    user_data,
)
from data.learning import save_learned_mapping, save_unit_conversion
from utils.error_handling import log_error
from utils.invoice_processing import check_product_exists, format_invoice_data

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def display_item_selection(query, user_id):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        query: Callback-–∑–∞–ø—Ä–æ—Å
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    matched_data = user_data[user_id]["matched_data"]

    message_text = "üìã Select an item to edit:\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = []

    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "Unknown item")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        if len(name) > 30:
            name = name[:27] + "..."

        message_text += f"{line_num}. {name}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard.append(
            [InlineKeyboardButton(f"Edit item #{line_num}", callback_data=f"edit_item:{i}")]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append(
        [
            InlineKeyboardButton("Back to Main", callback_data="back_to_main"),
            InlineKeyboardButton("Cancel", callback_data="cancel_process"),
        ]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=message_text, reply_markup=reply_markup)


async def handle_item_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in user_data:
            await query.edit_message_text("Error: Invoice data not found.")
            return WAIT_PHOTO

        if query.data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
            message_text = format_invoice_data(user_data[user_id])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            unmatched_items = [
                item
                for item in user_data[user_id]["matched_data"].get("lines", [])
                if item.get("product_id") is None
            ]

            if unmatched_items:
                keyboard.append(
                    [InlineKeyboardButton("Fix Unrecognized Items", callback_data="edit_unmatched")]
                )

            keyboard.append(
                [InlineKeyboardButton("Review & Edit Items", callback_data="select_edit_item")]
            )

            if not unmatched_items:
                keyboard.append(
                    [InlineKeyboardButton("Confirm & Preview Final", callback_data="final_preview")]
                )

            keyboard.append([InlineKeyboardButton("Cancel", callback_data="cancel_process")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            return CONFIRMATION

        elif query.data == "cancel_process":
            if user_id in user_data:
                del user_data[user_id]

            await query.edit_message_text(text="Operation canceled. Send a new invoice photo.")
            return WAIT_PHOTO

        elif query.data.startswith("edit_item:"):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            item_index = int(query.data.split(":")[1])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            user_data[user_id]["current_edit_index"] = item_index

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            if "edit_history" not in user_data[user_id]:
                user_data[user_id]["edit_history"] = []

            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = json.loads(json.dumps(user_data[user_id]["matched_data"]))
            user_data[user_id]["edit_history"].append(current_state)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
            await display_item_edit_options(query, user_id, item_index)
            return EDIT_ITEM

        return SELECT_EDIT_ITEM

    except Exception as e:
        error_msg = f"Error in handle_item_selection: {e}"
        log_error(error_msg, exc_info=True)

        try:
            await query.edit_message_text(
                text="‚ùå An error occurred. Please try again or start over with /cancel."
            )
        except Exception:
            pass

        return WAIT_PHOTO


async def display_item_edit_options(query, user_id, item_index):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π

    Args:
        query: Callback-–∑–∞–ø—Ä–æ—Å
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        item_index: –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞
    """
    matched_data = user_data[user_id]["matched_data"]
    line = matched_data["lines"][item_index]

    line_num = line.get("line", item_index + 1)
    name = line.get("name", "Unknown item")
    qty = line.get("qty", 0)
    unit = line.get("unit", "")
    price = line.get("price", 0)
    product_id = line.get("product_id")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ —É–∂–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
    is_unrecognized = product_id is None

    # –î–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    edit_progress = ""
    unmatched_indices = []
    if is_unrecognized:
        unmatched_indices = [
            i for i, l in enumerate(matched_data.get("lines", [])) if l.get("product_id") is None
        ]
        current_position = unmatched_indices.index(item_index) + 1
        total_unmatched = len(unmatched_indices)
        edit_progress = f"Item {current_position} of {total_unmatched} unrecognized"

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"Editing item #{line_num}{' (' + edit_progress + ')' if edit_progress else ''}:\n\n"
        f"Name: {name}\n"
        f"Quantity: {qty} {unit}\n"
        f"Price: {price} IDR\n"
    )

    if product_id:
        message_text += f"Status: ‚úÖ Matched with ID: {product_id}\n"
    else:
        message_text += "Status: ‚ùì Unrecognized\n"

    message_text += "\nSelect action:"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []

    # –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    keyboard.append(
        [InlineKeyboardButton("Enter correct item", callback_data=f"manual_match:{item_index}")]
    )
    keyboard.append(
        [InlineKeyboardButton("Add as new item", callback_data=f"add_new:{item_index}")]
    )

    # –î–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if is_unrecognized and len(unmatched_indices) > 1:
        next_idx = unmatched_indices[
            (unmatched_indices.index(item_index) + 1) % len(unmatched_indices)
        ]
        keyboard.append(
            [
                InlineKeyboardButton(
                    "Skip to next unrecognized",
                    callback_data=f"next_unmatched:{next_idx}",
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    keyboard.append(
        [InlineKeyboardButton("Set unit conversion", callback_data=f"set_conversion:{item_index}")]
    )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
    if user_data[user_id].get("edit_history"):
        nav_row.append(InlineKeyboardButton("Previous Step", callback_data="previous_step"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if is_unrecognized:
        nav_row.append(InlineKeyboardButton("Back to Main", callback_data="back_to_main"))
    else:
        nav_row.append(InlineKeyboardButton("Back to Item List", callback_data="back_to_selection"))

    if nav_row:
        keyboard.append(nav_row)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("Cancel Operation", callback_data="cancel_process")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=message_text, reply_markup=reply_markup)


async def handle_item_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in user_data or user_data[user_id].get("current_edit_index") is None:
            await query.edit_message_text("Error: Editing data not found.")
            return WAIT_PHOTO

        current_index = user_data[user_id]["current_edit_index"]
        matched_data = user_data[user_id]["matched_data"]

        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if query.data.startswith("manual_match:"):
            item_index = int(query.data.split(":")[1])
            item_name = matched_data["lines"][item_index].get("name", "")

            await query.edit_message_text(
                text=f"Enter the correct item name for '{item_name}'.\n\n"
                "Type the exact name as it appears in your product database."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            context.user_data["awaiting_item_name"] = {
                "item_index": item_index,
                "original_name": item_name,
            }

            return ADD_NEW_ITEM

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –Ω–æ–≤–æ–≥–æ
        elif query.data.startswith("add_new:"):
            item_index = int(query.data.split(":")[1])
            item_name = matched_data["lines"][item_index].get("name", "")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [
                    InlineKeyboardButton(
                        "Yes, add as new", callback_data=f"confirm_add_new:{item_index}"
                    ),
                    InlineKeyboardButton("No, go back", callback_data=f"back_to_edit:{item_index}"),
                ]
            ]

            await query.edit_message_text(
                text=f"Are you sure you want to add '{item_name}' as a new product?\n\n"
                "This will create a new entry in the database.",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )

            return EDIT_ITEM

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        elif query.data.startswith("confirm_add_new:"):
            item_index = int(query.data.split(":")[1])
            item_name = matched_data["lines"][item_index].get("name", "")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —Ç–æ–≤–∞—Ä–∞
            new_product_id = f"new_{item_index}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
            matched_data["lines"][item_index]["product_id"] = new_product_id
            matched_data["lines"][item_index]["match_score"] = 1.0  # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            save_learned_mapping(item_name, new_product_id, item_name)

            await query.edit_message_text(
                text=f"‚úÖ Item '{item_name}' added as new and saved for future recognition."
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(1.5)

            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            next_unmatched = None
            for i, line in enumerate(matched_data.get("lines", [])):
                if line.get("product_id") is None:
                    next_unmatched = i
                    break

            if next_unmatched is not None:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
                user_data[user_id]["current_edit_index"] = next_unmatched
                await display_item_edit_options(query, user_id, next_unmatched)
                return EDIT_ITEM
            else:
                # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
                await query.edit_message_text(
                    text="‚úÖ All items processed!\n\n" "Ready to review final invoice?",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "Review Final Invoice",
                                    callback_data="final_preview",
                                )
                            ],
                            [InlineKeyboardButton("Cancel", callback_data="cancel_process")],
                        ]
                    ),
                )
                return CONFIRMATION

        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        elif query.data.startswith("back_to_edit:"):
            item_index = int(query.data.split(":")[1])
            await display_item_edit_options(query, user_id, item_index)
            return EDIT_ITEM

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
        elif query.data.startswith("next_unmatched:"):
            next_index = int(query.data.split(":")[1])
            user_data[user_id]["current_edit_index"] = next_index
            await display_item_edit_options(query, user_id, next_index)
            return EDIT_ITEM

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        elif query.data.startswith("set_conversion:"):
            item_index = int(query.data.split(":")[1])
            item_name = matched_data["lines"][item_index].get("name", "")
            current_unit = matched_data["lines"][item_index].get("unit", "")

            await query.edit_message_text(
                text=f"Setting unit conversion for '{item_name}'.\n\n"
                f"Current unit: {current_unit}\n\n"
                "Please enter the target unit (e.g., kg, l, pcs):"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            context.user_data["setting_conversion"] = {
                "item_index": item_index,
                "product_name": item_name,
                "source_unit": current_unit,
                "step": "target_unit",
            }

            return SET_CONVERSION

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        elif query.data == "previous_step":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not user_data[user_id].get("edit_history"):
                await query.edit_message_text(
                    text="Cannot go back: no edit history found.",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "Continue Editing",
                                    callback_data=f"back_to_edit:{current_index}",
                                )
                            ]
                        ]
                    ),
                )
                return EDIT_ITEM

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            previous_state = user_data[user_id]["edit_history"].pop()
            user_data[user_id]["matched_data"] = previous_state

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ
            await display_item_edit_options(query, user_id, current_index)
            return EDIT_ITEM

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
        elif query.data == "back_to_selection":
            await display_item_selection(query, user_id)
            return SELECT_EDIT_ITEM

        # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
        elif query.data == "back_to_main":
            message_text = format_invoice_data(user_data[user_id])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            unmatched_items = [
                item for item in matched_data.get("lines", []) if item.get("product_id") is None
            ]

            if unmatched_items:
                keyboard.append(
                    [InlineKeyboardButton("Fix Unrecognized Items", callback_data="edit_unmatched")]
                )

            keyboard.append(
                [InlineKeyboardButton("Review & Edit Items", callback_data="select_edit_item")]
            )

            if not unmatched_items:
                keyboard.append(
                    [InlineKeyboardButton("Confirm & Preview Final", callback_data="final_preview")]
                )

            keyboard.append([InlineKeyboardButton("Cancel", callback_data="cancel_process")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            return CONFIRMATION

        # –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        elif query.data == "cancel_process":
            if user_id in user_data:
                del user_data[user_id]

            await query.edit_message_text(text="Operation canceled. Send a new invoice photo.")
            return WAIT_PHOTO

        return EDIT_ITEM

    except Exception as e:
        error_msg = f"Error in handle_item_edit: {e}"
        log_error(error_msg, exc_info=True)

        try:
            await query.edit_message_text(
                text="‚ùå An error occurred. Please try again or start over with /cancel."
            )
        except Exception as inner_e:
            log_error(f"Error sending error message: {inner_e}", exc_info=True)

        return WAIT_PHOTO


async def handle_manual_item_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        user_id = update.effective_user.id

        if user_id not in user_data:
            await update.message.reply_text("Error: Invoice data not found.")
            return WAIT_PHOTO

        if "awaiting_item_name" not in context.user_data:
            await update.message.reply_text("Error: No item being edited.")
            return WAIT_PHOTO

        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        entered_name = update.message.text.strip()
        item_index = context.user_data["awaiting_item_name"]["item_index"]
        original_name = context.user_data["awaiting_item_name"]["original_name"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if "edit_history" not in user_data[user_id]:
            user_data[user_id]["edit_history"] = []

        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = json.loads(json.dumps(user_data[user_id]["matched_data"]))
        user_data[user_id]["edit_history"].append(current_state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
        exists, product_id = await check_product_exists(entered_name)

        if exists and product_id:
            # –¢–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID
            user_data[user_id]["matched_data"]["lines"][item_index]["product_id"] = product_id
            user_data[user_id]["matched_data"]["lines"][item_index]["match_score"] = 1.0
            user_data[user_id]["matched_data"]["lines"][item_index]["manual_name"] = entered_name

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            save_learned_mapping(original_name, product_id, entered_name)

            await update.message.reply_text(
                f"‚úÖ Found product '{entered_name}' in database!\n\n"
                f"Item '{original_name}' successfully matched and saved for future recognition."
            )
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            keyboard = [
                [
                    InlineKeyboardButton(
                        "Yes, add as new",
                        callback_data=f"confirm_manual_new:{item_index}:{entered_name}",
                    ),
                    InlineKeyboardButton(
                        "No, try again", callback_data=f"retry_manual:{item_index}"
                    ),
                ]
            ]

            await update.message.reply_text(
                f"‚ùì Product '{entered_name}' not found in database.\n\n"
                "Would you like to add it as a new product?",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            context.user_data["awaiting_item_name"]["entered_name"] = entered_name

            return ADD_NEW_ITEM

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del context.user_data["awaiting_item_name"]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        matched_data = user_data[user_id]["matched_data"]
        next_unmatched = None

        for i, line in enumerate(matched_data.get("lines", [])):
            if line.get("product_id") is None:
                next_unmatched = i
                break

        if next_unmatched is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            user_data[user_id]["current_edit_index"] = next_unmatched

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            keyboard = [
                [
                    InlineKeyboardButton(
                        "Enter correct item",
                        callback_data=f"manual_match:{next_unmatched}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        "Add as new item", callback_data=f"add_new:{next_unmatched}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "Set unit conversion",
                        callback_data=f"set_conversion:{next_unmatched}",
                    )
                ],
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
            if user_data[user_id].get("edit_history"):
                keyboard.append(
                    [InlineKeyboardButton("Previous Step", callback_data="previous_step")]
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.append(
                [
                    InlineKeyboardButton("Back to Main", callback_data="back_to_main"),
                    InlineKeyboardButton("Cancel", callback_data="cancel_process"),
                ]
            )

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            line = matched_data["lines"][next_unmatched]
            line_num = line.get("line", next_unmatched + 1)
            name = line.get("name", "Unknown item")
            qty = line.get("qty", 0)
            unit = line.get("unit", "")
            price = line.get("price", 0)

            # –°—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–µ–¥–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            unmatched_indices = [
                i
                for i, l in enumerate(matched_data.get("lines", []))
                if l.get("product_id") is None
            ]
            current_position = unmatched_indices.index(next_unmatched) + 1
            total_unmatched = len(unmatched_indices)

            message_text = (
                f"Editing item {current_position} of {total_unmatched}:\n\n"
                f"Line: {line_num}\n"
                f"Name: {name}\n"
                f"Quantity: {qty} {unit}\n"
                f"Price: {price} IDR\n\n"
                "Select action:"
            )

            await update.message.reply_text(
                text=message_text, reply_markup=InlineKeyboardMarkup(keyboard)
            )

            return EDIT_ITEM
        else:
            # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
            await update.message.reply_text(
                "‚úÖ All items processed!\n\n" "Ready to review final invoice?",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "Review Final Invoice", callback_data="final_preview"
                            )
                        ],
                        [InlineKeyboardButton("Cancel", callback_data="cancel_process")],
                    ]
                ),
            )

            return CONFIRMATION

    except Exception as e:
        error_msg = f"Error in handle_manual_item_entry: {e}"
        log_error(error_msg, exc_info=True)
        await update.message.reply_text(
            "‚ùå An error occurred. Please try again or start over with /cancel."
        )
        return WAIT_PHOTO


async def handle_manual_entry_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ —Ç–æ–≤–∞—Ä–∞

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in user_data:
            await query.edit_message_text("Error: Invoice data not found.")
            return WAIT_PHOTO

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        if query.data.startswith("confirm_manual_new:"):
            parts = query.data.split(":")
            item_index = int(parts[1])

            # –ï—Å–ª–∏ –≤ callback_data –Ω–µ—Ç –∏–º–µ–Ω–∏, –±–µ—Ä–µ–º –∏–∑ context.user_data
            if len(parts) > 2:
                entered_name = parts[2]
            else:
                if (
                    "awaiting_item_name" not in context.user_data
                    or "entered_name" not in context.user_data["awaiting_item_name"]
                ):
                    await query.edit_message_text("Error: Item name data not found.")
                    return EDIT_ITEM
                entered_name = context.user_data["awaiting_item_name"].get("entered_name", "")

            original_name = context.user_data["awaiting_item_name"]["original_name"]

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID —Ç–æ–≤–∞—Ä–∞
            new_product_id = (
                f"manual_new_{item_index}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
            )
            user_data[user_id]["matched_data"]["lines"][item_index]["product_id"] = new_product_id
            user_data[user_id]["matched_data"]["lines"][item_index]["match_score"] = 1.0
            user_data[user_id]["matched_data"]["lines"][item_index]["manual_name"] = entered_name

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            save_learned_mapping(original_name, new_product_id, entered_name)

            await query.edit_message_text(
                f"‚úÖ Item '{entered_name}' added as new and saved for future recognition."
            )

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "awaiting_item_name" in context.user_data:
                del context.user_data["awaiting_item_name"]

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(1.5)

            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            matched_data = user_data[user_id]["matched_data"]
            next_unmatched = None

            for i, line in enumerate(matched_data.get("lines", [])):
                if line.get("product_id") is None:
                    next_unmatched = i
                    break

            if next_unmatched is not None:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
                user_data[user_id]["current_edit_index"] = next_unmatched
                await display_item_edit_options(query, user_id, next_unmatched)
                return EDIT_ITEM
            else:
                # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
                await query.edit_message_text(
                    text="‚úÖ All items processed!\n\n" "Ready to review final invoice?",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "Review Final Invoice",
                                    callback_data="final_preview",
                                )
                            ],
                            [InlineKeyboardButton("Cancel", callback_data="cancel_process")],
                        ]
                    ),
                )
                return CONFIRMATION

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        elif query.data.startswith("retry_manual:"):
            item_index = int(query.data.split(":")[1])
            item_name = user_data[user_id]["matched_data"]["lines"][item_index].get("name", "")

            await query.edit_message_text(
                text=f"Please try entering a different name for '{item_name}'.\n\n"
                "Make sure to type the exact name as it appears in your product database."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if "awaiting_item_name" not in context.user_data:
                context.user_data["awaiting_item_name"] = {}

            context.user_data["awaiting_item_name"]["item_index"] = item_index
            context.user_data["awaiting_item_name"]["original_name"] = item_name

            return ADD_NEW_ITEM

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–±—ç–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ —Ç–æ–≤–∞—Ä–∞
        elif query.data.startswith("back_to_edit:"):
            item_index = int(query.data.split(":")[1])
            await display_item_edit_options(query, user_id, item_index)
            return EDIT_ITEM

        elif query.data == "cancel_process":
            if user_id in user_data:
                del user_data[user_id]

            if "awaiting_item_name" in context.user_data:
                del context.user_data["awaiting_item_name"]

            await query.edit_message_text(text="Operation canceled. Send a new invoice photo.")
            return WAIT_PHOTO

        return ADD_NEW_ITEM

    except Exception as e:
        error_msg = f"Error in handle_manual_entry_callback: {e}"
        log_error(error_msg, exc_info=True)

        try:
            await query.edit_message_text(
                text="‚ùå An error occurred. Please try again or start over with /cancel."
            )
        except Exception:
            pass

        return WAIT_PHOTO


async def handle_conversion_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        user_id = update.effective_user.id

        if user_id not in user_data:
            await update.message.reply_text("Error: Invoice data not found.")
            return WAIT_PHOTO

        if "setting_conversion" not in context.user_data:
            await update.message.reply_text("Error: No conversion being set.")
            return WAIT_PHOTO

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input_text = update.message.text.strip()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        conversion_data = context.user_data["setting_conversion"]
        current_step = conversion_data.get("step")

        if current_step == "target_unit":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–µ–ª–µ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            target_unit = input_text.lower()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
            conversion_data["target_unit"] = target_unit
            conversion_data["step"] = "conversion_factor"

            await update.message.reply_text(
                text=f"Setting unit conversion from {conversion_data['source_unit']} to {target_unit}.\n\n"
                f"Please enter the conversion factor (e.g., 0.5 means 1 {conversion_data['source_unit']} = 0.5 {target_unit}):"
            )

            return SET_CONVERSION

        elif current_step == "conversion_factor":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            try:
                conversion_factor = float(input_text.replace(",", "."))

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
                item_index = conversion_data["item_index"]
                product_name = conversion_data["product_name"]
                source_unit = conversion_data["source_unit"]
                target_unit = conversion_data["target_unit"]

                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
                matched_data = user_data[user_id]["matched_data"]
                product_id = matched_data["lines"][item_index].get("product_id")

                if not product_id:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    product_id = (
                        f"temp_{item_index}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
                    )
                    matched_data["lines"][item_index]["product_id"] = product_id

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                save_unit_conversion(
                    product_id,
                    product_name,
                    source_unit,
                    target_unit,
                    conversion_factor,
                )

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
                qty = matched_data["lines"][item_index].get("qty", 0)
                matched_data["lines"][item_index]["original_qty"] = qty
                matched_data["lines"][item_index]["original_unit"] = source_unit
                matched_data["lines"][item_index]["qty"] = qty * conversion_factor
                matched_data["lines"][item_index]["unit"] = target_unit
                matched_data["lines"][item_index]["conversion_applied"] = True

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                if "conversions_applied" not in user_data[user_id]:
                    user_data[user_id]["conversions_applied"] = []

                user_data[user_id]["conversions_applied"].append(
                    {
                        "line_index": item_index,
                        "product_name": product_name,
                        "product_id": product_id,
                        "original_qty": qty,
                        "original_unit": source_unit,
                        "converted_qty": qty * conversion_factor,
                        "converted_unit": target_unit,
                        "conversion_factor": conversion_factor,
                    }
                )

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                await update.message.reply_text(
                    "‚úÖ Unit conversion set successfully!\n\n"
                    f"1 {source_unit} = {conversion_factor} {target_unit}\n\n"
                    f"This conversion will be automatically applied to all '{product_name}' items in future invoices."
                )

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del context.user_data["setting_conversion"]

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = []

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                unmatched_items = [
                    i
                    for i, line in enumerate(matched_data.get("lines", []))
                    if line.get("product_id") is None
                ]

                if unmatched_items:
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                "Continue with unrecognized items",
                                callback_data=f"next_unmatched:{unmatched_items[0]}",
                            )
                        ]
                    )

                keyboard.append(
                    [
                        InlineKeyboardButton("Review all items", callback_data="select_edit_item"),
                        InlineKeyboardButton("Back to Main", callback_data="back_to_main"),
                    ]
                )

                keyboard.append([InlineKeyboardButton("Cancel", callback_data="cancel_process")])

                await update.message.reply_text(
                    "What would you like to do next?",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                )

                return EDIT_ITEM

            except ValueError:
                # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
                await update.message.reply_text(
                    "Please enter a valid number for the conversion factor (e.g., 0.5, 2, 1.25)."
                )

                return SET_CONVERSION

        # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        return EDIT_ITEM

    except Exception as e:
        error_msg = f"Error in handle_conversion_entry: {e}"
        log_error(error_msg, exc_info=True)
        await update.message.reply_text(
            "‚ùå An error occurred. Please try again or start over with /cancel."
        )
        return WAIT_PHOTO


async def handle_conversion_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if user_id not in user_data:
            await query.edit_message_text("Error: Invoice data not found.")
            return WAIT_PHOTO

        if query.data == "cancel_process":
            if user_id in user_data:
                del user_data[user_id]

            if "setting_conversion" in context.user_data:
                del context.user_data["setting_conversion"]

            await query.edit_message_text(text="Operation canceled. Send a new invoice photo.")
            return WAIT_PHOTO

        elif query.data == "back_to_edit" and "setting_conversion" in context.user_data:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
            item_index = context.user_data["setting_conversion"].get("item_index")

            if item_index is not None:
                del context.user_data["setting_conversion"]
                await display_item_edit_options(query, user_id, item_index)
                return EDIT_ITEM

        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        return SET_CONVERSION

    except Exception as e:
        error_msg = f"Error in handle_conversion_callback: {e}"
        log_error(error_msg, exc_info=True)

        try:
            await query.edit_message_text(
                text="‚ùå An error occurred. Please try again or start over with /cancel."
            )
        except Exception:
            pass

        return WAIT_PHOTO
