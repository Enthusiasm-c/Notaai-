import logging

from telegram import Update
from telegram.ext import ContextTypes

from config import WAIT_PHOTO, user_data
from utils.error_handling import log_error

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        await update.message.reply_text(
            "üëã Hello! I'm Nota AI - your intelligent invoice processing assistant.\n\n"
            "I can help you:\n"
            "‚Ä¢ Extract data from invoice photos\n"
            "‚Ä¢ Match items with your product database\n"
            "‚Ä¢ Convert units of measurement automatically\n"
            "‚Ä¢ Send structured data to Syrve\n\n"
            "Simply send me a photo of an invoice to get started!"
        )
        return WAIT_PHOTO
    except Exception as e:
        log_error(f"Error in start command: {e}", exc_info=True)
        await update.message.reply_text("An error occurred. Please try again.")
        return WAIT_PHOTO


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        await update.message.reply_text(
            "üìã Nota AI Help Guide:\n\n"
            "Basic Commands:\n"
            "/start - Start working with the bot\n"
            "/help - Show this message\n"
            "/cancel - Cancel the current operation\n\n"
            "How to use Nota AI:\n"
            "1. üì∏ Send a photo of an invoice\n"
            "2. üîç I'll process the image and extract data\n"
            "3. ‚úèÔ∏è Fix any unrecognized items\n"
            "4. üîÑ Set unit conversions if needed\n"
            "5. üìã Review the final data before sending\n"
            "6. ‚úÖ Confirm to send data to Syrve\n\n"
            "Advanced Features:\n"
            "‚Ä¢ You can edit any item before final confirmation\n"
            "‚Ä¢ You can go back to previous steps if needed\n"
            "‚Ä¢ Unit conversions are remembered for future invoices"
        )
        return WAIT_PHOTO
    except Exception as e:
        log_error(f"Error in help command: {e}", exc_info=True)
        await update.message.reply_text("An error occurred. Please try again.")
        return WAIT_PHOTO


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel

    Args:
        update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        user_id = update.effective_user.id
        if user_id in user_data:
            del user_data[user_id]

        await update.message.reply_text("Operation canceled. Send a new invoice photo when ready.")
        return WAIT_PHOTO
    except Exception as e:
        log_error(f"Error in cancel command: {e}", exc_info=True)
        await update.message.reply_text("An error occurred. Please try again.")
        return WAIT_PHOTO
