"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
"""

import dataclasses
import datetime
import logging
from typing import Any, Dict, List, Optional, Tuple

from utils.learning import load_unit_conversions

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


def apply_unit_conversions(matched_data: Dict) -> List[Dict]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    unit_conversions = load_unit_conversions()
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions_applied = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    for i, line in enumerate(matched_data.get("lines", [])):
        product_id = line.get("product_id")
        product_name = line.get("name", "")
        source_unit = line.get("unit", "")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if not product_id or not source_unit:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if source_unit in unit_conversions:
            conversions = unit_conversions[source_unit]
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
            for target_unit, factor in conversions.items():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                original_qty = line.get("qty", 0)
                line["original_qty"] = original_qty
                line["original_unit"] = source_unit
                line["qty"] = original_qty * factor
                line["unit"] = target_unit
                line["conversion_applied"] = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                conversions_applied.append({
                    "line_index": i,
                    "product_name": product_name,
                    "product_id": product_id,
                    "original_qty": original_qty,
                    "original_unit": source_unit,
                    "converted_qty": original_qty * factor,
                    "converted_unit": target_unit,
                    "conversion_factor": factor,
                })
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                break
    
    logger.info("Applied %d unit conversions", len(conversions_applied))
    return conversions_applied


def format_invoice_data(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    total = matched_data.get("total", 0)
    
    message = "üìÑ *–ù–∞–∫–ª–∞–¥–Ω–∞—è –æ—Ç {}*\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    message += "*–¢–æ–≤–∞—Ä—ã:*\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        product_id = line.get("product_id")
        match_score = line.get("match_score", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º
        item_price = qty * price
        item_line = "{}. {} - {} {} √ó {} = {:.2f}".format(
            line_num, name, qty, unit, price, item_price
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        if product_id:
            status = "‚úÖ" if match_score > 0.8 else "‚ö†Ô∏è"
            item_line += " {}".format(status)
        else:
            item_line += " ‚ùì"
            
        message += item_line + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions = user_data.get("conversions_applied", [])
    if conversions:
        message += "\n*–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n"
        for conv in conversions:
            message += "‚Ä¢ {}: {} {} ‚Üí {} {}\n".format(
                conv['product_name'],
                conv['original_qty'],
                conv['original_unit'],
                conv['converted_qty'],
                conv['converted_unit']
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    message += "\n*–ò—Ç–æ–≥–æ:* {:.2f}".format(total)
    
    return message


def format_final_invoice(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    total = matched_data.get("total", 0)
    
    message = "üìã *–§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø*\n\n"
    message += "*–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {}\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
    message += "*–¢–û–í–ê–†–´:*\n"
    message += "```\n"
    message += "# –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ                   –ö–æ–ª-–≤–æ     –¶–µ–Ω–∞      –°—É–º–º–∞     \n"
    message += "-" * 70 + "\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = name[:27] + "..." if len(name) > 30 else name
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        item_price = qty * price
        line_str = "{:<3} {:<30} {} {:<6} {:<10.2f} {:<10.2f}\n".format(
            line_num, display_name, qty, unit, price, item_price
        )
        message += line_str
    
    message += "-" * 70 + "\n"
    message += "–ò–¢–û–ì–û:                                            {:.2f}\n".format(total)
    message += "```\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
    message += "*–î–µ–π—Å—Ç–≤–∏—è:*\n"
    message += "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Syrve\n"
    message += "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"
    message += "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
    
    return message


async def match_invoice_items(invoice_data) -> Dict:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Args:
        invoice_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ—Ç OCR

    Returns:
        dict: –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    from utils.match import match
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    matched_data: Dict[str, Any] = dataclasses.asdict(invoice_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    lines = []
    for item in invoice_data.items:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∏
        line = {
            "name": item.get("name", ""),
            "qty": item.get("qty", 0),
            "unit": item.get("unit", ""),
            "price": item.get("price", 0),
            "product_id": None,
            "match_score": 0,
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        product_id, score = match(line["name"])
        
        if product_id and score > 0:
            line["product_id"] = product_id
            line["match_score"] = score
            logger.info("Matched item: %s -> %s (score: %.2f)", line["name"], product_id, score)
        else:
            logger.info("No match found for item: %s", line["name"])
        
        lines.append(line)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏
    matched_data["lines"] = lines
    
    return matched_data


def prepare_invoice_data_for_syrve(matched_data: Dict) -> Dict:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Syrve.

    Args:
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Syrve API
    """
    import datetime
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    syrve_data = {
        "date": datetime.datetime.now().strftime("%Y-%m-%d"),
        "supplier": matched_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"),
        "items": [],
        "total": matched_data.get("total", 0),
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç Syrve
    for line in matched_data.get("lines", []):
        if not line.get("product_id"):
            logger.warning("Skipping item without product_id: %s", line.get("name"))
            continue
            
        syrve_item = {
            "product_id": line["product_id"],
            "name": line["name"],
            "quantity": line["qty"],
            "unit": line["unit"],
            "price": line["price"],
        }
        syrve_data["items"].append(syrve_item)
    
    return syrve_data


def save_invoice_data(user_id: int, matched_data: Dict) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    import datetime
    import json
    import os
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    history_dir = os.path.join("data", "history")
    os.makedirs(history_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = "invoice_{}_{}.json".format(user_id, timestamp)
    file_path = os.path.join(history_dir, filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(matched_data, f, ensure_ascii=False, indent=2)
    
    logger.info("Saved invoice data to %s", file_path)
    return file_path


async def check_product_exists(product_name: str) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    Returns:
        tuple: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä, ID —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    """
    from utils.match import match
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
    product_id, score = match(product_name)
    
    if product_id and score > 0.9:
        logger.info("Product exists: %s -> %s (score: %.2f)", product_name, product_id, score)
        return True, product_id
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ None
    logger.info("Product does not exist: %s", product_name)
    return False, None


def format_invoice_for_display(invoice_dict: Dict) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç match_invoice_items (—Å–ª–æ–≤–∞—Ä—å) –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π
    —Ç–µ–∫—Å—Ç –¥–ª—è Telegram: —à–∞–ø–∫–∞, —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–æ–∫, –∏—Ç–æ–≥.
    
    Args:
        invoice_dict: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    * –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å markdown, —Ç–æ–ª—å–∫–æ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    * –ö–æ–ª–æ–Ω–∫–∏: ‚Ññ, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–æ–±—Ä–µ–∑–∞—Ç—å –¥–æ 22 —Å–∏–º–≤), –ö–æ–ª-–≤–æ+–µ–¥, –¶–µ–Ω–∞.
    * –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ 60 —Å–∏–º–≤–æ–ª–æ–≤.
    * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    vendor_name = invoice_dict.get("vendor_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    date = invoice_dict.get("date", datetime.datetime.now().strftime("%Y-%m-%d"))
    total_amount = invoice_dict.get("total_amount", 0)
    items = invoice_dict.get("items", [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
    try:
        date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d.%m.%Y")
    except (ValueError, TypeError):
        formatted_date = date
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = [
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
        f"‚ïë –ü–æ—Å—Ç–∞–≤—â–∏–∫: {vendor_name:<43}‚ïë",
        f"‚ïë –î–∞—Ç–∞: {formatted_date:<49}‚ïë",
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£",
        "‚ïë  ‚Ññ  ‚ïë –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ           ‚ïë –ö–æ–ª-–≤–æ       ‚ïë    –¶–µ–Ω–∞     ‚ïë",
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    rows = []
    for i, item in enumerate(items, 1):
        name = item.get("name", "")
        # –û–±—Ä–µ–∑–∞–µ–º –∏–º—è –¥–æ 22 —Å–∏–º–≤–æ–ª–æ–≤
        name_display = name[:22] + "..." if len(name) > 22 else name.ljust(22)
        
        quantity = item.get("quantity", 0)
        unit = item.get("unit", "—à—Ç")
        price = item.get("price", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        qty_str = f"{quantity} {unit}"
        row = f"‚ïë {i:3} ‚ïë {name_display} ‚ïë {qty_str:12} ‚ïë {price:11.2f} ‚ïë"
        rows.append(row)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–≤–∞–ª —Ç–∞–±–ª–∏—Ü—ã
    footer = [
        "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£",
        f"‚ïë –ò–¢–û–ì–û: {total_amount:52.2f} ‚ïë",
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    result = "\n".join(header + rows + footer)
    return result


def test_format_invoice_for_display():
    """
    Unit-—Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_invoice_for_display
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_invoice = {
        "vendor_name": "–û–û–û –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫",
        "date": "2023-05-15",
        "total_amount": 12345.67,
        "items": [
            {"name": "–¢–æ–≤–∞—Ä —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞", "quantity": 10, "unit": "—à—Ç", "price": 100.50},
            {"name": "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–≤–∞—Ä", "quantity": 5, "unit": "–∫–≥", "price": 2009.00},
            {"name": "–¢–æ–≤–∞—Ä –±–µ–∑ –µ–¥–∏–Ω–∏—Ü", "quantity": 3, "price": 100.00}
        ]
    }
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    result = format_invoice_for_display(test_invoice)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert "–û–û–û –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫" in result
    assert "15.05.2023" in result
    assert "12345.67" in result
    assert "–¢–æ–≤–∞—Ä —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∏–º–µ–Ω..." in result
    assert "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–≤–∞—Ä" in result
    assert "10 —à—Ç" in result
    assert "5 –∫–≥" in result
    assert "3 —à—Ç" in result
    assert "100.50" in result
    assert "2009.00" in result
    assert "100.00" in result
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 60 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–∏—Ä–∏–Ω—É)
    lines = result.split("\n")
    for line in lines:
        assert len(line) == 60, f"–°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 60 —Å–∏–º–≤–æ–ª–æ–≤: '{line}'"
    
    print("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
