"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
"""
import dataclasses
import datetime
import logging
import csv
import os
from typing import Any, Dict, List, Optional, Tuple

from rapidfuzz import fuzz

from utils.learning import load_unit_conversions

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
SUPPLIERS_FILE = os.path.join("data", "base_suppliers.csv")

# –ö—ç—à –¥–ª—è –±–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
_suppliers_cache: List[Dict[str, str]] = []

__all__ = [
    "apply_unit_conversions",
    "format_invoice_data",
    "format_final_invoice",
    "match_invoice_items",
    "enrich_invoice",
    "format_invoice_for_display",
    "check_product_exists",
    "extract_supplier_buyer",
    "ensure_result",
    "find_supplier",
    "load_suppliers",
]


def load_suppliers() -> List[Dict[str, str]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ CSV-—Ñ–∞–π–ª–∞

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    """
    global _suppliers_cache

    # –ï—Å–ª–∏ –∫—ç—à –Ω–µ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if _suppliers_cache:
        return _suppliers_cache

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(SUPPLIERS_FILE):
        logger.warning(f"Suppliers file not found: {SUPPLIERS_FILE}")
        return []

    try:
        suppliers = []
        with open(SUPPLIERS_FILE, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                suppliers.append(
                    {
                        "id": row.get("id", ""),
                        "name": row.get("name", ""),
                    }
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _suppliers_cache = suppliers
        logger.info(f"Loaded {len(suppliers)} suppliers from {SUPPLIERS_FILE}")
        return suppliers
    except Exception as e:
        logger.error(f"Error loading suppliers: {e}", exc_info=True)
        return []


def find_supplier(supplier_name: str) -> Optional[Tuple[str, str]]:
    """
    –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫ (–õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω ‚â§ 2)

    Args:
        supplier_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

    Returns:
        Optional[Tuple[str, str]]: (ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    suppliers = load_suppliers()
    if not suppliers:
        logger.warning("No suppliers available for matching")
        return None

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier_name_lower = supplier_name.lower().strip()

    matches = []
    for supplier in suppliers:
        supplier_name_db = supplier.get("name", "").lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if supplier_name_lower == supplier_name_db:
            return supplier.get("id"), supplier.get("name", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
        score = fuzz.ratio(supplier_name_lower, supplier_name_db)
        levenshtein_dist = len(supplier_name_lower) + len(supplier_name_db) - (score * (len(supplier_name_lower) + len(supplier_name_db)) / 100) / 2
        
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ ‚â§ 2
        if levenshtein_dist <= 2:
            matches.append((supplier.get("id"), supplier.get("name", ""), score))

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if len(matches) == 1:
        supplier_id, supplier_name, score = matches[0]
        logger.info(f"Found supplier match: {supplier_name} (ID: {supplier_id}, score: {score})")
        return supplier_id, supplier_name
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if matches:
        logger.info(f"Multiple supplier matches found for '{supplier_name}': {matches}")
    else:
        logger.info(f"No supplier match found for '{supplier_name}'")
    
    return None


def apply_unit_conversions(matched_data: Dict) -> List[Dict]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    unit_conversions = load_unit_conversions()
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions_applied = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    for i, line in enumerate(matched_data.get("lines", [])):
        product_id = line.get("product_id")
        product_name = line.get("name", "")
        source_unit = line.get("unit", "")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if not product_id or not source_unit:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if source_unit in unit_conversions:
            conversions = unit_conversions[source_unit]
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
            for target_unit, factor in conversions.items():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                original_qty = line.get("qty", 0)
                line["original_qty"] = original_qty
                line["original_unit"] = source_unit
                line["qty"] = original_qty * factor
                line["unit"] = target_unit
                line["conversion_applied"] = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                conversions_applied.append({
                    "line_index": i,
                    "product_name": product_name,
                    "product_id": product_id,
                    "original_qty": original_qty,
                    "original_unit": source_unit,
                    "converted_qty": original_qty * factor,
                    "converted_unit": target_unit,
                    "conversion_factor": factor,
                })
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                break
    
    logger.info("Applied %d unit conversions", len(conversions_applied))
    return conversions_applied


def format_invoice_data(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "Unknown supplier")
    total = matched_data.get("total", 0)
    
    message = "üìÑ *Invoice from {}*\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    message += "*Items:*\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "Unknown item")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        product_id = line.get("product_id")
        match_score = line.get("match_score", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º
        item_price = qty * price
        item_line = "{}. {} - {} {} √ó {} = {:.0f}".format(
            line_num, name, qty, unit, price, item_price
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        if product_id:
            status = "‚úÖ" if match_score > 0.8 else "‚ö†Ô∏è"
            item_line += " {}".format(status)
        else:
            item_line += " ‚ùì"
            
        message += item_line + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions = user_data.get("conversions_applied", [])
    if conversions:
        message += "\n*Applied conversions:*\n"
        for conv in conversions:
            message += "‚Ä¢ {}: {} {} ‚Üí {} {}\n".format(
                conv['product_name'],
                conv['original_qty'],
                conv['original_unit'],
                conv['converted_qty'],
                conv['converted_unit']
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    formatted_total = "{:,.0f}".format(total).replace(",", " ")
    message += "\n*Total:* IDR {}".format(formatted_total)
    
    return message


def format_final_invoice(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "Unknown supplier")
    total = matched_data.get("total", 0)
    
    message = "üìã *FINAL INVOICE*\n\n"
    message += "*Supplier:* {}\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
    message += "*ITEMS:*\n"
    message += "```\n"
    message += "# Name                         Quantity   Price     Total     \n"
    message += "-" * 70 + "\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "Unknown item")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = name[:27] + "..." if len(name) > 30 else name
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        item_price = qty * price
        formatted_price = "{:,.0f}".format(price).replace(",", " ")
        formatted_item_price = "{:,.0f}".format(item_price).replace(",", " ")
        
        line_str = "{:<3} {:<30} {} {:<6} {:<10} {:<10}\n".format(
            line_num, display_name, qty, unit, formatted_price, formatted_item_price
        )
        message += line_str
    
    message += "-" * 70 + "\n"
    formatted_total = "{:,.0f}".format(total).replace(",", " ")
    message += "TOTAL:                                            IDR {}\n".format(formatted_total)
    message += "```\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
    message += "*Actions:*\n"
    message += "‚Ä¢ Confirm and send to Syrve\n"
    message += "‚Ä¢ Return to editing\n"
    message += "‚Ä¢ Cancel and start over\n"
    
    return message


async def match_invoice_items(invoice_data) -> Dict:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Args:
        invoice_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ—Ç OCR

    Returns:
        dict: –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    from utils.match import match
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    matched_data: Dict[str, Any] = dataclasses.asdict(invoice_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    lines = []
    for item in invoice_data.items:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∏
        line = {
            "name": item.get("name", ""),
            "qty": item.get("qty", 0),
            "unit": item.get("unit", ""),
            "price": item.get("price", 0),
            "product_id": None,
            "match_score": 0,
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        product_id, score = match(line["name"])
        
        if product_id and score > 0:
            line["product_id"] = product_id
            line["match_score"] = score
            logger.info("Matched item: %s -> %s (score: %.2f)", line["name"], product_id, score)
        else:
            logger.info("No match found for item: %s", line["name"])
        
        lines.append(line)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏
    matched_data["lines"] = lines
    
    return matched_data


async def extract_supplier_buyer(ocr_data: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR.
    
    Args:
        ocr_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    """
    from utils.match import match
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ OCR –¥–∞–Ω–Ω—ã—Ö
    vendor_name = ocr_data.get("vendor_name", "")
    buyer_name = ocr_data.get("buyer_name", "")
    raw_text = ocr_data.get("raw_text", "")
    
    # –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è Eggstra –≤ —Ç–µ–∫—Å—Ç–µ
    buyer_found = False
    if raw_text and "eggstra" in raw_text.lower():
        buyer_name = "Eggstra"
        buyer_found = True
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –±–∞–∑–µ
    supplier_match = None
    if vendor_name:
        supplier_match = find_supplier(vendor_name)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if supplier_match:
        vendor_id, matched_vendor_name = supplier_match
        vendor_status = "matched"
        vendor_confidence = 1.0
    else:
        vendor_id = None
        vendor_status = "unmatched"
        vendor_confidence = 0.0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "vendor_id": vendor_id,
        "vendor_name": vendor_name,
        "buyer_id": None,  # –î–ª—è Eggstra –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ID
        "buyer_name": buyer_name if buyer_found else "",
        "vendor_confidence": vendor_confidence,
        "buyer_confidence": 1.0 if buyer_found else 0.0,
        "vendor_status": vendor_status,
        "buyer_status": "matched" if buyer_found else "unmatched",
        "buyer_found": buyer_found,
    }
    
    return result


async def enrich_invoice(parsed_invoice: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –∏ –¥–æ–±–∞–≤–ª—è—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    
    Args:
        parsed_invoice: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å–ª–µ OCR
    
    Returns:
        Dict[str, Any]: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    from utils.match import match_products
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    enriched = parsed_invoice.copy()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    supplier_buyer_info = await extract_supplier_buyer(parsed_invoice)
    enriched.update(supplier_buyer_info)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    items = parsed_invoice.get("items", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    valid_units = ["kg", "pcs", "pack", "box", "liter", "g", "ml", "bottle", "can"]
    
    for item in items:
        unit = item.get("unit", "").lower()
        if unit not in valid_units:
            item["unit_valid"] = False
        else:
            item["unit_valid"] = True
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    enriched_items = await match_products(items)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    matched_count = 0
    unmatched_count = 0
    invalid_count = 0
    
    for item in enriched_items:
        quantity = item.get("quantity", 0)
        price = item.get("price", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ü–µ–Ω–∞ —Ä–∞–≤–Ω—ã 0)
        if quantity == 0 or price == 0:
            item["is_valid"] = False
            invalid_count += 1
            unmatched_count += 1
        else:
            item["is_valid"] = True
            if item.get("match_status") == "matched":
                matched_count += 1
            else:
                unmatched_count += 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    total_qty_matched = sum(
        item.get("quantity", 0) for item in enriched_items
        if item.get("match_status") == "matched" and item.get("is_valid", True)
    )
    
    total_sum_matched_idr = sum(
        item.get("quantity", 0) * item.get("price", 0)
        for item in enriched_items 
        if item.get("match_status") == "matched" and item.get("is_valid", True)
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏
    enriched["items"] = enriched_items
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    enriched.update({
        "enriched_at": datetime.datetime.now().isoformat(),
        "items_count": len(enriched_items),
        "matched_count": matched_count,
        "unmatched_count": unmatched_count,
        "invalid_count": invalid_count,
        "total_qty_matched": total_qty_matched,
        "total_sum_matched_idr": total_sum_matched_idr,
    })
    
    return enriched


async def ensure_result(result: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        
    Returns:
        Dict[str, Any]: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    return result


def format_invoice_for_display(invoice_dict: Dict) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç match_invoice_items (—Å–ª–æ–≤–∞—Ä—å) –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π
    —Ç–µ–∫—Å—Ç –¥–ª—è Telegram: —à–∞–ø–∫–∞, —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–æ–∫, –∏—Ç–æ–≥.

    Args:
        invoice_dict: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vendor_name = invoice_dict.get("vendor_name", "Unknown supplier")
    vendor_id = invoice_dict.get("vendor_id")
    buyer_name = invoice_dict.get("buyer_name", "")
    buyer_found = invoice_dict.get("buyer_found", False)
    date = invoice_dict.get("date", datetime.datetime.now().strftime("%Y-%m-%d"))
    
    matched_count = invoice_dict.get("matched_count", 0)
    unmatched_count = invoice_dict.get("unmatched_count", 0)
    total_sum_matched_idr = invoice_dict.get("total_sum_matched_idr", 0)
    
    items = invoice_dict.get("items", [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
    try:
        date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d %b %Y")
    except (ValueError, TypeError):
        formatted_date = date
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = [
        "üìÑ <b>Invoice</b>",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    if vendor_id:
        supplier_display = f"{vendor_name} (ID = {vendor_id})"
        supplier_status = ""
    else:
        supplier_display = "‚ùå Unknown supplier"
        supplier_status = "[üñäÔ∏è Select supplier]"
    
    result.append(f"<b>Supplier</b>: {supplier_display}")
    if supplier_status:
        result.append(supplier_status)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    if buyer_found:
        buyer_display = f"{buyer_name}"
        buyer_status = ""
    else:
        buyer_display = "‚ö†Ô∏è Not found ‚Äì invoice may belong to another venue"
        buyer_status = "[üñäÔ∏è Set buyer]"
    
    result.append(f"<b>Buyer</b>: {buyer_display}")
    if buyer_status:
        result.append(buyer_status)
    
    result.append(f"<b>Scanned</b>: {formatted_date}")
    result.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    if matched_count > 0:
        total_items = matched_count + unmatched_count
        formatted_total = "{:,.0f}".format(total_sum_matched_idr).replace(",", " ")
        result.append(f"‚úÖ Matched {matched_count} / {total_items} lines ‚Äî IDR {formatted_total}")
    
    if unmatched_count > 0:
        result.append(f"‚ùå Need fix {unmatched_count}")
    
    result.append("")
    
    # –°–ø–∏—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    matched_items = [
        item for item in items 
        if item.get("match_status") == "matched" and item.get("is_valid", True)
    ]
    unmatched_items = [
        item for item in items 
        if item.get("match_status") != "matched" or not item.get("is_valid", True)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if matched_items:
        result.append("--- MATCHED ({}) ---".format(len(matched_items)))
        
        for i, item in enumerate(matched_items, 1):
            name = item.get("name", "")
            quantity = item.get("quantity", 0)
            unit = item.get("unit", "pcs")
            price = item.get("price", 0)
            total_item = quantity * price
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            name_dots = name + " " + "." * max(0, 20 - len(name))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_str = "{:,.0f}".format(price).replace(",", " ")
            total_str = "{:,.0f}".format(total_item).replace(",", " ")
            
            result.append(f"{i}. {name_dots} {quantity} {unit} √ó {price_str} = {total_str}")
        
        result.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if unmatched_items:
        result.append("--- NEED FIX ({}) ---".format(len(unmatched_items)))
        
        for i, item in enumerate(unmatched_items, len(matched_items) + 1):
            name = item.get("name", "")
            quantity = item.get("quantity", 0)
            unit = item.get("unit", "pcs")
            price = item.get("price", 0)
            total_item = quantity * price
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
            status = ""
            if not item.get("is_valid", True):
                status = "‚ö†Ô∏è"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            name_dots = name + " " + "." * max(0, 20 - len(name))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_str = "{:,.0f}".format(price).replace(",", " ")
            total_str = "{:,.0f}".format(total_item).replace(",", " ")
            
            item_index = items.index(item)
            fix_button = f"[‚úèÔ∏è Fix_{item_index+1}]"
            
            result.append(f"{i}. {name_dots} {quantity} {unit} √ó {price_str} = {total_str} {status} {fix_button}")
    
    return "\n".join(result)


async def check_product_exists(product_name: str) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    Returns:
        tuple: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä, ID —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    """
    from utils.match import match
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
    product_id, score = match(product_name)
    
    if product_id and score > 0.9:
        logger.info("Product exists: %s -> %s (score: %.2f)", product_name, product_id, score)
        return True, product_id
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ None
    logger.info("Product does not exist: %s", product_name)
    return False, None
