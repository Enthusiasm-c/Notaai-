"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
"""
import dataclasses
import datetime
import logging
from typing import Any, Dict, List, Optional, Tuple

from utils.learning import load_unit_conversions

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

__all__ = [
    "apply_unit_conversions",
    "format_invoice_data",
    "format_final_invoice",
    "match_invoice_items",
    "enrich_invoice",
    "format_invoice_for_display",
    "check_product_exists",
    "extract_supplier_buyer",
    "ensure_result",
]


def apply_unit_conversions(matched_data: Dict) -> List[Dict]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    unit_conversions = load_unit_conversions()
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions_applied = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    for i, line in enumerate(matched_data.get("lines", [])):
        product_id = line.get("product_id")
        product_name = line.get("name", "")
        source_unit = line.get("unit", "")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if not product_id or not source_unit:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if source_unit in unit_conversions:
            conversions = unit_conversions[source_unit]
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
            for target_unit, factor in conversions.items():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                original_qty = line.get("qty", 0)
                line["original_qty"] = original_qty
                line["original_unit"] = source_unit
                line["qty"] = original_qty * factor
                line["unit"] = target_unit
                line["conversion_applied"] = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                conversions_applied.append({
                    "line_index": i,
                    "product_name": product_name,
                    "product_id": product_id,
                    "original_qty": original_qty,
                    "original_unit": source_unit,
                    "converted_qty": original_qty * factor,
                    "converted_unit": target_unit,
                    "conversion_factor": factor,
                })
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                break
    
    logger.info("Applied %d unit conversions", len(conversions_applied))
    return conversions_applied


def format_invoice_data(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    total = matched_data.get("total", 0)
    
    message = "üìÑ *–ù–∞–∫–ª–∞–¥–Ω–∞—è –æ—Ç {}*\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    message += "*–¢–æ–≤–∞—Ä—ã:*\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        product_id = line.get("product_id")
        match_score = line.get("match_score", 0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–æ–º
        item_price = qty * price
        item_line = "{}. {} - {} {} √ó {} = {:.2f}".format(
            line_num, name, qty, unit, price, item_price
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        if product_id:
            status = "‚úÖ" if match_score > 0.8 else "‚ö†Ô∏è"
            item_line += " {}".format(status)
        else:
            item_line += " ‚ùì"
            
        message += item_line + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö
    conversions = user_data.get("conversions_applied", [])
    if conversions:
        message += "\n*–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:*\n"
        for conv in conversions:
            message += "‚Ä¢ {}: {} {} ‚Üí {} {}\n".format(
                conv['product_name'],
                conv['original_qty'],
                conv['original_unit'],
                conv['converted_qty'],
                conv['converted_unit']
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    message += "\n*–ò—Ç–æ–≥–æ:* {:.2f}".format(total)
    
    return message


def format_final_invoice(user_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.

    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    matched_data = user_data.get("matched_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = matched_data.get("supplier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")
    total = matched_data.get("total", 0)
    
    message = "üìã *–§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–ö–õ–ê–î–ù–ê–Ø*\n\n"
    message += "*–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {}\n\n".format(supplier)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
    message += "*–¢–û–í–ê–†–´:*\n"
    message += "```\n"
    message += "# –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ                   –ö–æ–ª-–≤–æ     –¶–µ–Ω–∞      –°—É–º–º–∞     \n"
    message += "-" * 70 + "\n"
    
    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_name = name[:27] + "..." if len(name) > 30 else name
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        item_price = qty * price
        line_str = "{:<3} {:<30} {} {:<6} {:<10.2f} {:<10.2f}\n".format(
            line_num, display_name, qty, unit, price, item_price
        )
        message += line_str
    
    message += "-" * 70 + "\n"
    message += "–ò–¢–û–ì–û:                                            {:.2f}\n".format(total)
    message += "```\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
    message += "*–î–µ–π—Å—Ç–≤–∏—è:*\n"
    message += "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Syrve\n"
    message += "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"
    message += "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
    
    return message


async def match_invoice_items(invoice_data) -> Dict:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Args:
        invoice_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ—Ç OCR

    Returns:
        dict: –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    from utils.match import match
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    matched_data: Dict[str, Any] = dataclasses.asdict(invoice_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    lines = []
    for item in invoice_data.items:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∏
        line = {
            "name": item.get("name", ""),
            "qty": item.get("qty", 0),
            "unit": item.get("unit", ""),
            "price": item.get("price", 0),
            "product_id": None,
            "match_score": 0,
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        product_id, score = match(line["name"])
        
        if product_id and score > 0:
            line["product_id"] = product_id
            line["match_score"] = score
            logger.info("Matched item: %s -> %s (score: %.2f)", line["name"], product_id, score)
        else:
            logger.info("No match found for item: %s", line["name"])
        
        lines.append(line)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏
    matched_data["lines"] = lines
    
    return matched_data


async def extract_supplier_buyer(ocr_data: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR.
    
    Args:
        ocr_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    """
    from utils.match import match
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ OCR –¥–∞–Ω–Ω—ã—Ö
    vendor_name = ocr_data.get("vendor_name", "")
    buyer_name = ocr_data.get("buyer_name", "")
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    vendor_id, vendor_score = match(vendor_name)
    buyer_id, buyer_score = match(buyer_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "vendor_id": vendor_id if vendor_score >= 0.6 else None,
        "vendor_name": vendor_name,
        "buyer_id": buyer_id if buyer_score >= 0.6 else None,
        "buyer_name": buyer_name,
        "vendor_confidence": vendor_score,
        "buyer_confidence": buyer_score,
        "vendor_status": "matched" if vendor_score >= 0.6 else "unmatched",
        "buyer_status": "matched" if buyer_score >= 0.6 else "unmatched",
    }
    
    return result


async def enrich_invoice(parsed_invoice: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –∏ –¥–æ–±–∞–≤–ª—è—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    
    Args:
        parsed_invoice: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å–ª–µ OCR
    
    Returns:
        Dict[str, Any]: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    """
    from utils.match import match_products
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    enriched = parsed_invoice.copy()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    supplier_buyer_info = await extract_supplier_buyer(parsed_invoice)
    enriched.update(supplier_buyer_info)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    items = parsed_invoice.get("items", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    valid_units = ["kg", "pcs", "pack", "box", "liter", "g", "ml", "bottle", "can"]
    
    for item in items:
        unit = item.get("unit", "").lower()
        if unit not in valid_units:
            item["unit_valid"] = False
        else:
            item["unit_valid"] = True
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    enriched_items = await match_products(items)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    matched_count = sum(1 for item in enriched_items if item.get("match_status") == "matched")
    unmatched_count = len(enriched_items) - matched_count
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    total_qty_matched = sum(
        item.get("quantity", 0) for item in enriched_items
        if item.get("match_status") == "matched"
    )
    
    total_sum_matched_idr = sum(
        item.get("quantity", 0) * item.get("price", 0)
        for item in enriched_items if item.get("match_status") == "matched"
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏
    enriched["items"] = enriched_items
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    enriched.update({
        "enriched_at": datetime.datetime.now().isoformat(),
        "items_count": len(enriched_items),
        "matched_count": matched_count,
        "unmatched_count": unmatched_count,
        "total_qty_matched": total_qty_matched,
        "total_sum_matched_idr": total_sum_matched_idr,
    })
    
    return enriched


async def ensure_result(result: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        
    Returns:
        Dict[str, Any]: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –∑–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    return result


def format_invoice_for_display(invoice_dict: Dict) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç match_invoice_items (—Å–ª–æ–≤–∞—Ä—å) –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π
    —Ç–µ–∫—Å—Ç –¥–ª—è Telegram: —à–∞–ø–∫–∞, —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–æ–∫, –∏—Ç–æ–≥.

    Args:
        invoice_dict: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vendor_name = invoice_dict.get("vendor_name", "Unknown supplier")
    vendor_id = invoice_dict.get("vendor_id")
    buyer_name = invoice_dict.get("buyer_name", "Unknown buyer")
    buyer_id = invoice_dict.get("buyer_id")
    date = invoice_dict.get("date", datetime.datetime.now().strftime("%Y-%m-%d"))
    
    matched_count = invoice_dict.get("matched_count", 0)
    unmatched_count = invoice_dict.get("unmatched_count", 0)
    total_sum_matched_idr = invoice_dict.get("total_sum_matched_idr", 0)
    
    items = invoice_dict.get("items", [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
    try:
        date_obj = datetime.datetime.strptime(date, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d %b %Y")
    except (ValueError, TypeError):
        formatted_date = date
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = [
        "üìÑ <b>Invoice</b>",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    vendor_status = "‚úì" if vendor_id else "‚ùå"
    buyer_status = "‚úì" if buyer_id else "‚ùå"
    
    vendor_display = f"{vendor_name}"
    if vendor_id:
        vendor_display += f" (ID {vendor_id})"
    
    buyer_display = f"{buyer_name}"
    if buyer_id:
        buyer_display += f" (ID {buyer_id})"
    
    result.append(f"<b>Supplier</b>: {vendor_display} {vendor_status}")
    result.append(f"<b>Buyer</b>: {buyer_display} {buyer_status}")
    result.append(f"<b>Scanned</b>: {formatted_date}")
    result.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    if matched_count > 0:
        total_items = matched_count + unmatched_count
        result.append(f"‚úÖ Matched {matched_count} / {total_items} lines ‚Äî IDR {total_sum_matched_idr:,.0f}")
    
    if unmatched_count > 0:
        result.append(f"‚ùå Need fix {unmatched_count}")
    
    result.append("")
    
    # –°–ø–∏—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    matched_items = [item for item in items if item.get("match_status") == "matched"]
    unmatched_items = [item for item in items if item.get("match_status") != "matched"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if matched_items:
        result.append("--- MATCHED ({}) ---".format(len(matched_items)))
        
        for i, item in enumerate(matched_items, 1):
            name = item.get("name", "")
            quantity = item.get("quantity", 0)
            unit = item.get("unit", "pcs")
            price = item.get("price", 0)
            total_item = quantity * price
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            name_dots = name + " " + "." * (20 - len(name))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
            price_str = f"{price:,.0f}" if price == int(price) else f"{price:,.2f}"
            total_str = f"{total_item:,.0f}" if total_item == int(total_item) else f"{total_item:,.2f}"
            
            result.append(f"{i}. {name_dots} {quantity} {unit} √ó {price_str} = {total_str}")
        
        result.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if unmatched_items:
        result.append("--- NEED FIX ({}) ---".format(len(unmatched_items)))
        
        for i, item in enumerate(unmatched_items, len(matched_items) + 1):
            name = item.get("name", "")
            quantity = item.get("quantity", 0)
            unit = item.get("unit", "pcs")
            price = item.get("price", 0)
            total_item = quantity * price
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ç–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            name_dots = name + " " + "." * (20 - len(name))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
            price_str = f"{price:,.0f}" if price == int(price) else f"{price:,.2f}"
            total_str = f"{total_item:,.0f}" if total_item == int(total_item) else f"{total_item:,.2f}"
            
            item_index = items.index(item)
            result.append(f"{i}. {name_dots} {quantity} {unit} √ó {price_str} = {total_str}  [‚úèÔ∏è Fix_{item_index+1}]")
    
    return "\n".join(result)


async def check_product_exists(product_name: str) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        product_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    Returns:
        tuple: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä, ID —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    """
    from utils.match import match
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
    product_id, score = match(product_name)
    
    if product_id and score > 0.9:
        logger.info("Product exists: %s -> %s (score: %.2f)", product_name, product_id, score)
        return True, product_id
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –∏ None
    logger.info("Product does not exist: %s", product_name)
    return False, None
