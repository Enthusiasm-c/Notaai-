import datetime
import json
import logging
from typing import Dict, List, Optional, Tuple

from data.learning import learned_mappings, unit_conversions
from utils.match import match

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def match_invoice_items(invoice_data: Dict) -> Dict:
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Args:
        invoice_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    """
    matched_data = invoice_data.copy()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    if "lines" in matched_data:
        for i, line in enumerate(matched_data["lines"]):
            item_name = line.get("name", "")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            learned_match = learned_mappings.get(item_name.lower())
            if learned_match:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                matched_data["lines"][i]["product_id"] = learned_match["product_id"]
                matched_data["lines"][i]["match_score"] = 1.0  # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                matched_data["lines"][i]["learned_name"] = learned_match[
                    "corrected_name"
                ]
                logger.info(
                    f"Used learned mapping for '{item_name}' -> '{learned_match['corrected_name']}'"
                )
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                product_id, score = match(item_name)
                matched_data["lines"][i]["product_id"] = product_id
                matched_data["lines"][i]["match_score"] = score

    return matched_data


def apply_unit_conversions(matched_data: Dict) -> List[Dict]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º

    Args:
        matched_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    """
    conversions_applied = []

    if "lines" not in matched_data:
        return conversions_applied

    for i, line in enumerate(matched_data["lines"]):
        product_id = line.get("product_id")
        if not product_id:
            continue

        product_name = line.get("name", "")
        qty = line.get("qty")
        unit = line.get("unit", "")

        if not qty or not unit:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        key = (product_id, unit.lower())
        if key in unit_conversions:
            conversion = unit_conversions[key]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            matched_data["lines"][i]["original_qty"] = qty
            matched_data["lines"][i]["original_unit"] = unit
            matched_data["lines"][i]["qty"] = qty * conversion["conversion_factor"]
            matched_data["lines"][i]["unit"] = conversion["target_unit"]
            matched_data["lines"][i]["conversion_applied"] = True

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
            conversions_applied.append(
                {
                    "line_index": i,
                    "product_name": product_name,
                    "product_id": product_id,
                    "original_qty": qty,
                    "original_unit": unit,
                    "converted_qty": qty * conversion["conversion_factor"],
                    "converted_unit": conversion["target_unit"],
                    "conversion_factor": conversion["conversion_factor"],
                }
            )

    return conversions_applied


def format_invoice_data(data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    invoice_data = data["invoice_data"]
    matched_data = data["matched_data"]
    conversions_applied = data.get("conversions_applied", [])

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    total_items = len(matched_data.get("lines", []))
    matched_items = sum(
        1
        for line in matched_data.get("lines", [])
        if line.get("product_id") is not None
    )
    unmatched_items = total_items - matched_items

    result = []
    result.append(
        f"üìë Invoice from supplier: {invoice_data.get('supplier', 'Not specified')}"
    )
    result.append(f"üìÜ Date: {invoice_data.get('date', 'Not specified')}\n")

    result.append(f"üìä General information:")
    result.append(f"- Total items in invoice: {total_items}")
    result.append(f"- Automatically matched: {matched_items}")
    result.append(f"- Need verification: {unmatched_items}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if conversions_applied:
        result.append("\nüîÑ Unit conversions applied:")
        for conversion in conversions_applied:
            result.append(
                f"- {conversion['product_name']}: "
                f"{conversion['original_qty']} {conversion['original_unit']} ‚Üí "
                f"{conversion['converted_qty']:.2f} {conversion['converted_unit']} "
                f"(factor: {conversion['conversion_factor']})"
            )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ
    if unmatched_items > 0:
        result.append("\n‚ùì Unrecognized items:")
        for i, line in enumerate(matched_data.get("lines", [])):
            if line.get("product_id") is None:
                line_num = line.get("line", i + 1)
                name = line.get("name", "Unknown item")
                qty = line.get("qty", 0)
                unit = line.get("unit", "")
                price = line.get("price", 0)

                result.append(f"‚ùì {line_num}. {name}: {qty} {unit}, {price} IDR")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
    learned_items = [
        line
        for line in matched_data.get("lines", [])
        if line.get("product_id") is not None and "learned_name" in line
    ]

    if learned_items:
        result.append("\n‚úÖ Items matched from previous corrections:")
        for line in learned_items:
            line_num = line.get("line", 0)
            name = line.get("name", "Unknown item")
            learned_name = line.get("learned_name", "")
            result.append(f"‚úÖ {line_num}. {name} ‚Üí {learned_name}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
    auto_matched = matched_items - len(learned_items)
    if auto_matched > 0:
        result.append(
            f"\n‚úÖ {auto_matched} other items successfully matched with the database."
        )

    return "\n".join(result)


def format_final_invoice(data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    invoice_data = data["invoice_data"]
    matched_data = data["matched_data"]

    result = []
    result.append(f"üìã FINAL INVOICE PREVIEW")
    result.append(f"üìë Supplier: {invoice_data.get('supplier', 'Not specified')}")
    result.append(f"üìÜ Date: {invoice_data.get('date', 'Not specified')}\n")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_sum = 0

    result.append(f"üìä ITEMS:")
    result.append(
        f"{'#':<4} {'Item Name':<30} {'Qty':<10} {'Unit':<8} {'Price':<12} {'Total':<12}"
    )
    result.append("-" * 80)

    for i, line in enumerate(matched_data.get("lines", [])):
        line_num = line.get("line", i + 1)
        name = line.get("name", "Unknown item")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        qty = line.get("qty", 0)
        unit = line.get("unit", "")
        price = line.get("price", 0)

        # –ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö
        qty_display = f"{qty}"
        if "original_qty" in line:
            qty_display = f"{qty:.2f} ({line['original_qty']} {line['original_unit']})"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—É—á–µ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        name_display = name
        if "learned_name" in line:
            name_display = f"{name} ‚Üí {line['learned_name']}"

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        line_total = qty * price if qty is not None and price is not None else 0
        total_sum += line_total

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if len(name_display) > 27:
            name_display = name_display[:24] + "..."

        result.append(
            f"{line_num:<4} {name_display:<30} {qty_display:<10} {unit:<8} {price:<12} {line_total:<12}"
        )

    result.append("-" * 80)
    result.append(f"{'TOTAL:':<45} {'':<8} {'':<12} {total_sum:<12} IDR")

    result.append("\n‚úÖ This data will be sent to Syrve. Please review carefully.")

    return "\n".join(result)


def prepare_invoice_data_for_syrve(matched_data: Dict) -> Dict:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Syrve API

    Args:
        matched_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
    """
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    invoice_data = {
        "number": f"INV-{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}",
        "date": matched_data.get("date", datetime.datetime.now().strftime("%d.%m.%Y")),
        "supplier_id": matched_data.get("supplier_id", "7"),  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "items": [],
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    for line in matched_data.get("lines", []):
        if line.get("product_id"):
            product_id = line.get("product_id")
            qty = line.get("qty", 0)
            price = line.get("price", 0)

            # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã
            total = qty * price

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
            invoice_data["items"].append(
                {
                    "product_id": product_id,
                    "amount": float(qty),
                    "price": float(price),
                    "total": float(total),
                }
            )

    return invoice_data


async def check_product_exists(item_name: str) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    Args:
        item_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    Returns:
        Tuple[bool, Optional[str]]: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç, ID_—Ç–æ–≤–∞—Ä–∞)
    """
    # –í MVP —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    product_id, score = match(
        item_name, threshold=0.95
    )  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è "—Ç–æ—á–Ω–æ–≥–æ" —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

    if product_id:
        return True, product_id

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—â–µ–º –±–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    product_id, score = match(item_name, threshold=0.7)

    if product_id:
        return True, product_id

    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return False, None


def save_invoice_data(user_id, matched_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ JSON-—Ñ–∞–π–ª

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        matched_data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π

    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"data/invoices/invoice_{user_id}_{timestamp}.json"

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(matched_data, f, ensure_ascii=False, indent=2)

    logger.info(f"Saved invoice data to {filename}")
    return filename
